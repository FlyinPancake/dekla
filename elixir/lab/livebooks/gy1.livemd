<!-- livebook:{"persist_outputs":true} -->

# DP23a - Funkcionális programozás, 1. gyakorlat

## Konvenciók, jelölések

A gyakorlatok anyaga szakaszokra van felosztva, minden szakaszban a bevezetés után néhány feladatot definiálunk, néha megoldott feladatokat is bemutatunk.

<div style="background-color: lightgreen; padding: 0.3em;">

```
Halványzöld peremű, fekete hátterű cellában (a továbbiakban: specifikációs cella) van
a szükséges „keretezéssel”, azaz a modul- és függvénydefinícióval együtt a megírandó
függvény típusspecifikációja, valamint néhány teszthívás is. Ebbe a cellába nem lehet
beleírni (csak szerkesztő módban), de a tartalmát ki lehet jelölni, lehet másolni.
```
</div>

<p style="background-color: pink; padding: 1rem; margin: 1rem 0;">
Rózsaszín hátterű cellába írjuk az esetleges korlátozásokat: ne használja ezt, ne csinálja azt stb.
</p>

Halványzöld hátterű cellában jelennek meg a magyarázataink, illetve a javaslataink egyes feladatok megoldására. Az utóbbiak gyakran el vannak rejve: a Súgó feliratra kattintva jelennek meg.

<p style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
Az egymást kölcsönösen kizáró minták használata...
</p>

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Súgó</summary>
Ezt és ezt javasoljuk a függvény megírásához.
</details>

A feladatot megoldó függvényt, kifejezést egy Elixir-cellába írja be: a felugó menüben a <em>+&nbsp;Elixir</em> feliratra kattintva hozzon létre egy új cellát, másolja be a specifikációs cella tartalmát, majd írja meg és értékelje ki a specifikált függvényt vagy a kért kifejezést.

## Rekurzió

<div style="background-color: lightgreen; padding: 0.3em;">
A deklaratív programozás alappillére a rekurzió. A rekurzió kétféle lehet: lineáris és elágazó (angolul <em>linear recursion, tree recursion).</em> Lineárisan rekurzív adatszerkezet a lista (láncolt lista, nem egydimenziós tömb!), elágazóan rekurzív a (bináris vagy több ágú) fa, ezek feldolgozására értelemszerűen rekurzív algoritmusokat írunk. De rekurzív algoritmusokat kell használnunk iterációk megvalósítására is ciklusok helyett, mivel az utóbbiak a deklaratív nyelvekben ismeretlen konstrukciók.
</div>

## Lineáris rekurzió, jobb- és balrekurzió

Írjon lineárisan rekurzív függvényeket az alábbi feladatok megoldására. Írjon többféle függvényváltozatot, először direkt rekurzióval, majd esetleg könyvtári függvények használatával. Mindig törekedjen elegáns, tömör, érthető és hatékony függvények írására.

<!-- livebook:{"break_markdown":true} -->

### Kiírás a rekurzív hívás előtt

Írjon olyan rekurzív függvényt <code>upto_by_3</code> néven, amelyik növekvő sorrendben kiírja az $1$ és $n$ közé eső, $n$-nél nem nagyobb, 3-mal osztható természetes számokat! Az $n$-et paraméterként adja át a függvénynek. A rekurzív hívás az adott klóz utolsó hívása, eredménye az adott klóz eredménye legyen, azaz a rekurzív hívás eredményével már ne végezzen semmilyen műveletet: a soron következő számot tehát a rekurzív hívás <b>előtt</b> írja ki. Segédfüggvényt definiálhat.

<div style="background-color: lightgreen; padding: 0.3em;">
Look lower
</div>

```elixir
defmodule UptoBy3 do
  @spec upto_by_3(n :: integer()) :: :ok
  def upto_by_3(n) do
    i = n - rem(n, 3)
    IO.puts(i)
    next = n - 3

    if next >= 0 do
      upto_by_3(next)
    else
      :ok
    end
  end
end

UptoBy3.upto_by_3(20)
```

<!-- livebook:{"output":true} -->

```
18
15
12
9
6
3
0
```

<!-- livebook:{"output":true} -->

```
:ok
```

<div style="background-color: lightgreen; padding: 0.3em;">
Mint már bizonyára tudja, jobbrekurziónak (terminális, ritkábban farokrekurziónak - angolul: tail recursion) nevezzük a rekurzív hívást, ha egy klóz egyetlen és utolsó hívása, és az eredményével már nem végzünk semmilyen műveletet (a visszaadáson kívül). A jobbrekurzív kódot a modern értelmező- és fordítóprogramok nagyon hatékonyan, iteratív processzként valósítják meg.
</div>

<!-- livebook:{"break_markdown":true} -->

### Kiírás a rekurzív hívás után

Írja át előző megoldását úgy, hogy a rekurzív hívás az adott klóz első hívása legyen, azaz a rekurzív hívás előtt ne végezzen semmilyen műveletet: a soron következő számot tehát a rekurzív hívás <b>után</b> írja ki. Segédfüggvényt definiálhat.

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule UptoBy3 do
  @spec upto_by_3(n :: integer()) :: :ok
  def upto_by_3(n) do
    ...
    IO.puts(i)
  end
end
UptoBy3.upto_by_3(20)
```
</div>

```elixir
defmodule UptoBy3LR do
  @spec upto_by_3(n :: integer()) :: :ok
  def upto_by_3(n) do
    i = n - rem(n, 3)
    upto_by_3(n - 3)
    IO.puts(i)
  end
end

UptoBy3.upto_by_3(20)
```

<!-- livebook:{"output":true} -->

```
18
15
12
9
6
3
0
```

<!-- livebook:{"output":true} -->

```
:ok
```

Vesse össze a két függvényalkalmazás által kiírt számsorozatot! Miben különbözik a kétféle megoldás veremhasználata?

<!-- livebook:{"break_markdown":true} -->

<div style="background-color: lightgreen; padding: 0.3em;">
A második változatban alkalmazott rekurzív hívást balrekurziónak (fejrekurziónak - angolul: head recursion) nevezzük: a balrekurzív hívás egy klóz első és egyetlen rekurzív hívása.
</div>

<!-- livebook:{"break_markdown":true} -->

A második változata valószínűleg nem teljesíti a specifikációt, ti. hogy növekvő sorrendben kell kiírni a számokat. Ezen úgy segíthet, hogy nem 1-től felfelé halad a generáláskor, hanem $n$-től lefelé.

Ha őrt (<code>when ...</code>) használt volna, helyette inkább mintaillesztést használjon az alapeset felismerésére. Lehetőleg használjon segédfüggvényt. Írja meg ezt a harmadik változatot is!

<!-- livebook:{"break_markdown":true} -->

### Legnagyobb közös osztó (greatest common divisor) euklideszi algoritmussal

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule Gcd do
  @spec gcd(a :: integer(), b :: integer()) :: d :: integer()
  # a és b legnagyobb közös osztója d
  def gcd(a, b) do
  ...
  end
end
IO.puts(Gcd.gcd(96, 42) === 6)
IO.puts(r2 = Gcd.gcd(90, 45))
```
</div>

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Súgó</summary>

Ha $a=b\cdot{}q+r$, akkor $gcd(a,b)=gcd(b,r)$, ahol $a$, $b$, $q$ és $r$ egész számok.

Írjon több változatot, pl. kivonással vagy maradékos osztással (<code>rem/2</code>). Gondoljon arra, hogy a függvény első paramétere nagyobb is, kisebb is lehet a másodiknál.
</details>

```elixir
defmodule Gcd do
  @spec gcd(a :: integer(), b :: integer()) :: d :: integer()
  # a és b legnagyobb közös osztója d
  def gcd(a, b) do
    r = rem(a, b)

    if r == 0 do
      b
    else
      gcd(b, r)
    end
  end
end

IO.puts(Gcd.gcd(96, 42) === 6)
IO.puts(r2 = Gcd.gcd(90, 45))
```

<!-- livebook:{"output":true} -->

```
true
45
```

<!-- livebook:{"output":true} -->

```
:ok
```

### 3-mal osztható egész számok listája

Írja meg (esetleg otthoni gyakorló feladatként) az <code>upto_by_3/1</code> függvény olyan jobb- és balrekurzív változatait is <code>upto_by_3_to_list/1</code> néven, amelyek listát adnak eredményül.

<p style="background-color: pink; padding: 1rem; margin: 1rem 0;">
Ne használja a <code>../2</code> és <code>../3</code>függvényeket az <code>upto_by_3_to_list/1</code> függvény megvalósítására! (De használhatja az eredmény ellenőrzésére.)
</p>

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule UptoBy3ToList do
  @spec upto_by_3_to_list(n :: integer()) :: ns :: [integer()]
  # Az 1 és n közé eső, 3-mal osztható egész számok listája ns
  def upto_by_3_to_list(n) do
    ...
  end
end
(UptoBy3ToList.upto_by_3_to_list(20) === [3, 6, 9, 12, 15, 18]) |> IO.puts
```
</div>

```elixir
defmodule UptoBy3ToList do
  @spec upto_by_3_to_list(n :: integer()) :: ns :: [integer()]
  # Az 1 és n közé eső, 3-mal osztható egész számok listája ns
  def upto_by_3_to_list(n) do
    i = n - rem(n, 3)

    if i > 0 do
      upto_by_3_to_list(n - 3) ++ [i]
    else
      []
    end
  end
end

(UptoBy3ToList.upto_by_3_to_list(20) === [3, 6, 9, 12, 15, 18]) |> IO.puts()
```

<!-- livebook:{"output":true} -->

```
true
```

<!-- livebook:{"output":true} -->

```
:ok
```

Sokféle egyéb lehetőség is van a megoldásra könyvtári függvények, köztük magasabb rendű függvények vagy a for-jelölés alkalmazásával. Keressen minél tömörebb, jobb, ugyanakkor könnyen érthető, magyarázható megoldásokat.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
 <summary>Súgó</summary>
Néhány megoldási lehetőség:

```elixir
1..div(20,3) |> Enum.map(&(Kernel.*(&1,3)))
for i <- 1..div(20,3), do: 3*i
for i <- 1..20, rem(i,3) === 0, do: i
3..20//3 |> Enum.to_list()
for i <- 3..20//3, do: i 
```
</details>

## Egyszerű feladatok listák rekurzív feldolgozása

### Lista hossza

Írjon rekurzív függvényt egy lista hosszának meghatározására! Ne használjon segédfüggvényt! (A feladat szerepelt az előadáson, de gyakorlásképpen most írja meg önállóan, ne nézze meg a megoldást.)

<div style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
Rekurzív adatszerkezetek feldolgozásának természetes módja a rekurzív algoritmus. Lineáris adatszerkezetek pl. listák feldolgozására (imperatív nyelveken) még csak lehet ciklust írni, de elágazóan rekurzív adatszerkezeteket, pl. fákat ciklusokkal bejárni már nagy kihívás.

Amikor algoritmust írunk egy rekurzív adatszerkezet feldolgozására, akkor legalább két, esetleg több klózt írunk. Közöttük vanank olyanok, amelyekre az adatszerkezet jellegzetessége miatt csak egyszer vagy csak nagyon ritkán, másokra gyakrabban kerül sor. Ilyen például az üres és a nemüres lista esete: az üres listát feldolgozó klóz kiértékelésére csak egyszer kerül sor, a nemüres listát feldolgozó klózt többször, a lista hosszától függően esetleg nagyon sokszor meghívjuk. 

Az algoritmus hatékonyságát javítja, ha 
<ul>
<li>egy függvény klózai <em>kölcsönösen kizárják</em> egymást, és</li>
<li>közülük a gyakrabban hívott(ak) megelőzi(k) a ritkábban hívott(ak)at.</li>
</ul>
A <code>length/1</code> függvény esetében ez azt jelenti, hogy az első a legalább egy elemű listákra, a második pedig az üres listákra illeszkedő klóz legyen.

```elixir
def fun([x|xs])...
def fun([])...
``` 
</div>

<p style="background-color: pink; padding: 1rem; margin: 1rem 0;">
Ne használja a <code>Kernel.length/1</code> függvényt!
</p>

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule Length do
  @spec len(xs: [any()]) :: n :: integer()
  # Az xs lista hossza n
  def len(n) do
  ...
  end
end
IO.puts(Length.len([]) == 0)
IO.puts(Length.len(Range.to_list(1..5)) == 5)
IO.puts(Length.len(~c"kőszerű") == 7)
```
</div>

```elixir
defmodule Length do
  @spec len(xs: [any()]) :: n :: integer()
  # Az xs lista hossza n
  def len(n) do
    if n == [] do
      0
    else
      [_ | ns] = n
      1 + len(ns)
    end
  end
end

IO.puts(Length.len([]) == 0)
IO.puts(Length.len(Range.to_list(1..5)) == 5)
IO.puts(Length.len(~c"kőszerű") == 7)
```

<!-- livebook:{"output":true} -->

```
true
true
true
```

<!-- livebook:{"output":true} -->

```
:ok
```

A lista hosszát most jobbrekurzív függvénnyel, akkumulátort és segédfüggvényt használva írja meg! (Ez is szerepelt az előadáson, de gyakorlásképpen most írja meg önállóan, ne nézze meg a megoldást.)

<!-- livebook:{"break_markdown":true} -->

### Lista utolsó eleme Erlang, illetve Elixir-stílusú eredmény- és hibajelzéssel

<div style="background-color: lightgreen; padding: 0.3em;">
Amikor egy listán műveleteket végzünk, gyakran előfordul, hogy bizonyos listákon bizonyos műveleteket nem lehet elvégezni. Egy üres listának értelemszerűen egyetlen eleme sincs, így pl. az utolsó elemét sem lehet visszaadni. Ilyenkor dönthetünk úgy, hogy az adott műveletet üres listára nem értelmezzük, és rábízzuk a rendszerre a hiba jelzését. Ha úgy döntünk, hogy jelezzük a helyes eredmény mellett a hibát is, akkor ezt hagyományosan kétféle stílusban tehetjük meg:

<ul>
<li>Erlang-stílusban a visszatérési érték típusa <code>{:ok, any()} | :error</code>, azaz siker esetén a visszatérési érték egy <code>{:ok, value}</code> pár, ahol egy <code>any()</code> típusú <code>value</code> a visszaadott érték, meghiúsulás esetén pedig az <code>:error</code> atom;</li>
<li>Elixir-stílusban a visszatérési érték típusa <code>any() | nil</code>, azaz siker esetén az <code>any()</code> típusú <code>value</code> visszaadott érték, meghiúsulás esetén pedig a <code>nil</code> atom.</li>
</ul>
</div>

<p style="background-color: pink; padding: 1rem; margin: 1rem 0;">
Ne használja a <code>List.last</code> függvényeket!
</p>

<!-- livebook:{"break_markdown":true} -->

##### Esetek megkülönböztetése kölcsönös kizárással

<div style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
A <code>last/1</code> függvénynek, amennyiben az üres listát nem kell kezelnie, két esetet kell megkülönböztetnie: azt, amikor a listának <em>pontosan</em> egy eleme van, és azt, amikor a listának <em>legalább</em> egy eleme van. A korábban látott sémát csak kicsit kell módosítanunk: a második klóznak nem az üres listára, hanem az egyelemű listára kell illeszkednie.

```elixir
def fun([x|xs])...
def fun([x])...
```
Csakhogy ezzel van egy kis gond: az első klóz minden olyan listára illeszkedik, amelyiknek van feje, a farka pedig tetszőleges elemszámú, azaz üres is lehet. Emiatt az első klóz az egyelemű listára is illeszkedik, azaz a második klózra soha nem kerül sor – a minták nem egymást kölcsönösen kizáróak. (Erre figyelmeztet is az Elixir fordító). A két klóz sorrendjének megfordításával a mintaillesztés a két esetet meg tudja különböztetni, ám ennek hatékonyságromlás az ára.

```elixir
def fun([x])...
def fun([x|xs])...
```
Lehet azonban olyan mintát is írni, amelyik legalább két elemű listákra illeszkedik, és ezáltal kölcsönös kizárásban van a pontosan egy egyelemű listára illeszkedő mintával:

```elixir
def fun([x1,x2|xs])...
def fun([x])...
```
Az első klóz törzsében a lista fejére az <code>x1</code> változóval, a lista farkára az <code>[x2|xs]</code> kifejezéssel hivatkozhatunk. Az utóbbi hivatkozást egyszerűbbé (és olcsóbbá!) tehetjük az ún. réteges mintával (layered pattern):  

```elixir
def fun([x1 | xxs = [_x2|_xs])...
def fun([x])...
```
A lista farkára az <code>xxs</code> változóval lehet hivatkozni. Az aláhúzásjellel kezdődő nevek helyett elég aláhúzásjelet írni, a beszédes nevek azonban segítik a megértést, a változó szerepére utalnak. Ha a lista második elemére vagy a harmadik elemtől kezdődő farkára akarunk hivatkozni a klóz törzsében, akkor ne aláhúzásjellel kezdődő változóneveket használjunk. 
</div>

<!-- livebook:{"break_markdown":true} -->

Először is írjon egy olyan függvényt, amelyik visszadja egy lista utolsó elemét, de a hibajelzést rábízza a rendszerre.

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule Last do
  @spec last(xs :: [any()]) :: x :: any()
  # ha xs nem üres, az utolsó eleme x
  def last(xs) do
  ...
  end
end
IO.puts(Last.last(~c"Élvezed?") == ??)
IO.puts(Last.last([]))
```
</div>

```elixir
defmodule Last do
  @spec last(xs :: [any()]) :: x :: any()
  # ha xs nem üres, az utolsó eleme x
  def last(xs) do
    [hd | rest] = xs

    if rest == [] do
      hd
    else
      last(rest)
    end
  end
end

IO.puts(Last.last(~c"Élvezed?") == ??)
IO.puts(Last.last([]))
```

<!-- livebook:{"output":true} -->

```
true
```

Most írja meg a függvényt Erlang-stílusú hibakezeléssel!

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule LastEr do
  @spec last(xs :: [any()]) :: r :: {:ok, x :: any()} | :error
  # Ha xs nem üres, r == {:ok, x}, ahol az xs utolsó eleme x, egyébként r == :error
  def last(xs) do
  ...
  end
end
IO.puts(LastEr.last(~c"Élvezed?") == {:ok, ??})
IO.puts(LastEr.last([]) == :error)
```
</div>

```elixir
defmodule LastEr do
  @spec last(xs :: [any()]) :: r :: {:ok, x :: any()} | :error
  # Ha xs nem üres, r == {:ok, x}, ahol az xs utolsó eleme x, egyébként r == :error
  def last(xs) do
    case xs do
      [] -> :error
      [hd | []] -> {:ok, hd}
      [_ | rest] -> last(rest)
    end
  end
end

IO.puts(LastEr.last(~c"Élvezed?") == {:ok, ??})
IO.puts(LastEr.last([]) == :error)
```

<!-- livebook:{"output":true} -->

```
true
true
```

<!-- livebook:{"output":true} -->

```
:ok
```

Most pedig írja meg Elixir-stílusú hibakezeléssel!

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule LastEx do
  @spec last(xs :: [any()]) :: r :: (x :: any()) | nil
  # Ha xs nem üres, r == x, ahol az xs utolsó eleme x, egyébként r == nil
  def last(xs) do
  ...
  end
end
IO.puts(LastEx.last(~c"Élvezed?") == ??)
IO.puts(LastEx.last([]) == nil)
```
</div>

```elixir
defmodule LastEx do
  @spec last(xs :: [any()]) :: r :: (x :: any()) | nil
  # Ha xs nem üres, r == x, ahol az xs utolsó eleme x, egyébként r == nil
  def last(xs) do
    case xs do
      [] -> nil
      [hd | []] -> hd
      [_ | some] -> last(some)
    end
  end
end

IO.puts(LastEx.last(~c"Élvezed?") == ??)
IO.puts(LastEx.last([]) == nil)
```

<!-- livebook:{"output":true} -->

```
true
true
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Mátrix első oszlopában lévő elemek összegyűjtése

Egy $n*m$ ($n,m>=0$) méretű mátrixot listák listájaként, sorfolytonosan ábrázolunk. Írjon olyan függvényt, amelyik egy listába gyűjti a mátrix első oszlopában lévő elemeket, az eredeti sorrendet megőrizve. Írjon több változatot, pl. (1) saját rekurzív függvényt, (2) az <code>Enum.map/2</code> magasabb rendű függvénnyel, (3) <code>for</code>-komprehenzióval. Használjon mintaillesztést, ahol csak lehet!

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule FirstCol do
  @spec first_col(xss :: [[any()]]) :: zs :: [any()] 
  def first_col(xss) do
  ...
  end
end
xss = [[A,B,C],[:a,:b,:c],[1,2,3],[3.2,2.1,1.0]]
(FirstCol.first_col(xss) === [A, :a, 1, 3.2]) |> inspect() |> IO.puts()
(FirstCol.first_col([]) === []) |> inspect() |> IO.puts()
```
</div>

```elixir
defmodule FirstCol do
  @spec first_col(xss :: [[any()]]) :: zs :: [any()]
  # def first_col(xss) do
  #   xss 
  #     |> Enum.map(fn xs ->
  #       [x|_] = xs
  #       x
  #     end)
  # end
  # def first_col(xss) do
  #   for xs <- xss do
  #     [x| _] = xs
  #     x 
  #   end
  # end

  def first_col([]) do
    []
  end

  def first_col(xss) do
    [xs | rest] = xss
    [x | _] = xs
    [x | first_col(rest)]
  end
end

xss = [[A, B, C], [:a, :b, :c], [1, 2, 3], [3.2, 2.1, 1.0]]
(FirstCol.first_col(xss) === [A, :a, 1, 3.2]) |> inspect() |> IO.puts()
(FirstCol.first_col([]) === []) |> inspect() |> IO.puts()
```

<!-- livebook:{"output":true} -->

```
true
true
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Listák listája első elemeinek összegyűjtése

Egy listában különböző hosszúságú listák vannak, ezek üresek is lehetnek. Írjon olyan függvényt, amelyik egy listába gyűjti a nemüres listák első elemeit, az eredeti sorrendet megőrizve. Írjon több változatot, pl. (1) saját rekurzív függvényt, (2) az <code>Enum.map/2</code>, <code>Enum.filter/2</code> vagy más magasabb rendű függvényekkel, (3) <code>for</code>-komprehenzióval. Használjon mintaillesztést, ahol csak lehet!

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule FirstElem do
  @spec first_elem(xss :: [[any()]]) :: zs :: [any()] 
  def first_elem(xss) do
  ...
  end
end
xss = [[A,B,C],[:a,:b,:c],[1,2,3],[3.2,2.1,1.0]]
(FirstElem.first_elem(xss) === [A, :a, 1, 3.2]) |> inspect() |> IO.puts()
xss = [[A,B],[:a,:b,:c,:d],[1],[],[3.2,2.1,1.0]]
(FirstElem.first_elem(xss) === [A, :a, 1, 3.2]) |> inspect() |> IO.puts()
(FirstElem.first_elem([]) === []) |> inspect() |> IO.puts()
```
</div>

```elixir
defmodule FirstElem do
  @spec first_elem(xss :: [[any()]]) :: zs :: [any()]
  def first_elem(xss) do
    xss
    |> Enum.filter(fn xs -> length(xs) > 0 end)
    |> Enum.map(fn [x | _] -> x end)
  end
end

xss = [[A, B, C], [:a, :b, :c], [1, 2, 3], [3.2, 2.1, 1.0]]
(FirstElem.first_elem(xss) === [A, :a, 1, 3.2]) |> inspect() |> IO.puts()
xss = [[A, B], [:a, :b, :c, :d], [1], [], [3.2, 2.1, 1.0]]
(FirstElem.first_elem(xss) === [A, :a, 1, 3.2]) |> inspect() |> IO.puts()
(FirstElem.first_elem([]) === []) |> inspect() |> IO.puts()
```

<!-- livebook:{"output":true} -->

```
true
true
true
```

<!-- livebook:{"output":true} -->

```
:ok
```

Módosítsa úgy a megoldásait, hogy üres lista esetén a lista feje helyett a <code>nil</code> atomot rakja be az eredménylistába.

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule FirstElem do
  @spec first_elem(xss :: [[any()]]) :: zs :: [any() | nil] 
  def first_elem(xss) do
  ...
  end
end
xss = [[A,B],[:a,:b,:c,:d],[1],[],[3.2,2.1,1.0]]
(FirstElem.first_elem(xss) === [A,:a,1,nil,3.2]) |> inspect() |> IO.puts()
```
</div>

Melyik verzióját a legkönnyebb módosítania?

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule FirstElemAlt do
  @spec first_elem(xss :: [[any()]]) :: zs :: [any() | nil]
  def first_elem(xss) do
    xss
    |> Enum.map(fn xs ->
      case xs do
        [] ->
          nil

        [x | _] ->
          x
          # _ -> nil
      end
    end)
  end
end

xss = [[A, B], [:a, :b, :c, :d], [1], [], [3.2, 2.1, 1.0]]
(FirstElemAlt.first_elem(xss) |> IO.inspect() === [A, :a, 1, nil, 3.2]) |> inspect() |> IO.puts()
```

<!-- livebook:{"output":true} -->

```
[A, :a, 1, nil, 3.2]
true
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Elfajult mátrix első oszlopának transzponálása

Elfajult mátrixnak nevezünk egy olyan mátrixot, amelynek soraiban különböző számú elemek lehetnek. Egy ilyen mátrixot is listák listájaként, sorfolytonosan ábrázolunk. Írjon olyan függvényt, amelyik egy elfajult mátrix első oszlopát az eredménymátrix első sorává transzformál, a további sorokban pedig a bemenő mátrix sorai vannak a transzformált első elemek kivételével, az eredeti sorrend megtartásával. Ha egy sor üres, akkor első eleme helyett a <code>nil</code> atom kerüljön be az eredménymátrixba. Írjon több változatot, pl. (1) saját rekurzív függvényt, (2) az <code>Enum.map/2</code> és/vagy magasabb rendű függvényekkel, (3) <code>for</code>-komprehenzióval. Használjon mintaillesztést, ahol csak lehet!

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule FirstColTranspose do
  @spec first_col_transpose(xss :: [[any()]]) :: zss :: [[any()]] 
  def first_col_transpose(xss) do
  ...
  end
end
xss = [[A,B,C],[:a,:b,:c],[1,2,3],[3.2,2.1,1.0]]
zss = [[A, :a, 1, 3.2],[B,C],[:b,:c],[2,3],[2.1,1.0]]
(FirstColTranspose.first_col_transpose(xss) === zss) |> inspect() |> IO.puts()
xss = [[A,B],[:a,:b,:c,:d],[1],[3.2,2.1,1.0]]
zss = [[A, :a, 1, 3.2],[B],[:b,:c,:d],[],[2.1,1.0]]
(FirstColTranspose.first_col_transpose(xss) === zss) |> inspect() |> IO.puts()
(FirstColTranspose.first_col_transpose([]) === [[]]) |> inspect() |> IO.puts()
xss = [[A,B],[:a,:b,:c,:d],[1],[],[3.2,2.1,1.0]]
zss = [[A,:a,1,nil,3.2],[B],[:b,:c,:d],[],[],[2.1,1.0]]
(FirstColTranspose.first_col_transpose(xss) === zss) |> inspect() |> IO.puts()
```
</div>

Lehet olyan változatot is írni, amelyik csak egyszer halad végig a bemenő mátrixon. Rajta, írjon egyet! Vagy többet! :-)

```elixir
defmodule FirstColTranspose do
  @spec first_col_transpose(xss :: [[any()]]) :: zss :: [[any()]]
  def first_col_transpose(xss) do
  end
end

xss = [[A, B, C], [:a, :b, :c], [1, 2, 3], [3.2, 2.1, 1.0]]
zss = [[A, :a, 1, 3.2], [B, C], [:b, :c], [2, 3], [2.1, 1.0]]
(FirstColTranspose.first_col_transpose(xss) === zss) |> inspect() |> IO.puts()
xss = [[A, B], [:a, :b, :c, :d], [1], [3.2, 2.1, 1.0]]
zss = [[A, :a, 1, 3.2], [B], [:b, :c, :d], [], [2.1, 1.0]]
(FirstColTranspose.first_col_transpose(xss) === zss) |> inspect() |> IO.puts()
(FirstColTranspose.first_col_transpose([]) === [[]]) |> inspect() |> IO.puts()
xss = [[A, B], [:a, :b, :c, :d], [1], [], [3.2, 2.1, 1.0]]
zss = [[A, :a, 1, nil, 3.2], [B], [:b, :c, :d], [], [], [2.1, 1.0]]
(FirstColTranspose.first_col_transpose(xss) === zss) |> inspect() |> IO.puts()
```

### Lista adott indexű eleme Elixir-stílusú hibajelzéssel

Írjon olyan függvényt mintaillesztéssel, amelyik egy lista adott indexű elemét adja eredményül, vagy a <code>nil</code> atomot, ha nincs ilyen indexű elem a listában! Az indexelés 0-val kezdődik, és balról jobbra halad.

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule AtEx do
  @spec at(xs :: [any()], n :: integer()) :: r :: (x :: any()) | nil
  # Az xs lista n-edik eleme e (indexelés 0-tól, balról jobbra) 
  def at(xs, n) do
  ...
  end
end
IO.puts(AtEx.at(~c"abcdefghi", 0) == ?a)
IO.puts(AtEx.at(~c"abcdefghi", 3) == ?d)
IO.puts(AtEx.at(~c"abcdefghi", 9) == nil)
IO.puts(AtEx.at(~c"", 5) == nil)
```
</div>

<p style="background-color: pink; padding: 1rem; margin: 1rem 0;">
Ne használja a <code>List.at</code> függvényeket!
</p>

<!-- livebook:{"break_markdown":true} -->

### Listák utolsó elemeinek listája

Írjon olyan rekurzív függvényt a <code>LastEr.last/1</code> függvény felhasználásával, amelyik paraméterként egy listák listáját kapja meg, és a belső listák utolsó eleméből álló listát adja eredményül. Ha egy belső lista üres, hagyja figyelmen kívül. Ha az összes belső lista üres, vagy a függvényt magát egy üres listára alkalmazzuk, az eredmény az üres lista legyen.

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule LastOfListsEr do
  @spec last_of_lists(xss :: [[any()]]) :: zs :: [any()]
  # xss utolsó elemeinek listája zs
  def last_of_lists(xss) do
  ...
  end
end
IO.puts(LastOfListsEr.last_of_lists([]) == [])
IO.puts(LastOfListsEr.last_of_lists([[]]) == [])
IO.puts(LastOfListsEr.last_of_lists([[], ~c""]) == [])
IO.puts(LastOfListsEr.last_of_lists([~c"apple", ~c"peach", ~c"", ~c"orange"]) == ~c"ehe")
```
</div>

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Súgó</summary>
A <code>LastEr.last/1</code> függvény visszatérési értékeit mintaillesztéssel azonosítsa egy <code>case</code> szerkezetben a rekurzív hívásokhoz.
</details>

<!-- livebook:{"break_markdown":true} -->

Írja meg a függvény egy változatát a <code>LastEx.last/1</code> függvény alkalmazásával.

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule LastOfListsEx do
  @spec last_of_lists(xss :: [[any()]]) :: zs :: [any()]
  # xss utolsó elemeinek listája zs
  def last_of_lists(xss) do
  ...
  end
end
IO.puts(LastOfListsEx.last_of_lists([]) == [])
IO.puts(LastOfListsEx.last_of_lists([[]]) == [])
IO.puts(LastOfListsEx.last_of_lists([[], ~c""]) == [])
css = [~c"now", ~c"bye", ~c"", ~c"hell", ~c"cell", ~c""]
(LastOfListsEx.last_of_lists(css) == ~c"well") |> IO.puts()
```
</div>

Mire kell ügyelnie a <code>case</code> kifejezésben ebben a változatban, amire a <code>LastEr.last/1</code> függvény alkalmazásakor nem kellett? Itt miért igen, ott miért nem?

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Súgó</summary>
A minták sorrendjére a <code>LastEx.last/1</code> függvény visszatérési értékeinek mintaillesztéssel való azonosításakor.
</details>

<!-- livebook:{"break_markdown":true} -->

### Listák utolsó előtti elemeinek listája

Írjon olyan rekurzív függvényt a <code>LastEx.last/1</code> vagy az <code>AtEx.at/2</code>függvény felhasználásával, amelyik listák listáját kapja paraméterként, és a belső listák utolsó előtti eleméből álló listát adja eredményül. Ha egy belső lista üres, hagyja figyelmen kívül. Ha az összes belső lista üres, vagy a függvényt magát egy üres listára alkalmazzuk, az eredmény az üres lista legyen.

<div style="background-color: lightgreen; padding: 0.3em;">

```elixir
defmodule LastButOnesEx do
  @spec last_but_ones(xss :: [[any()]]) :: zs :: [any()]
  # xss utolsó előtti elemeinek listája zs
  def last_but_ones(xss) do
  ...
  end
end
IO.puts(LastButOnesEx.last_but_ones([]) == [])
IO.puts(LastButOnesEx.last_but_ones([[]]) == [])
IO.puts(LastButOnesEx.last_but_ones([[], ~c""]) == [])
IO.puts(LastButOnesEx.last_but_ones([~c"bye", ~c"tiles", ~c"", ~c"list"]) == ~c"yes")
```
</div>
